*******************************************************************************/
//time complextiy  best case  big O(n)
//                 worest case   O (n^2)
//                 avarage case  O (n^2)

//space complextiy   O(1)
#include <iostream>
#include <algorithm>
using namespace std;
//we assume first index is sorrted so start the for from 1 not zero 
void insertionSort(int arr[] , int n)
{
      int key , j ;               //0     1  2  3  4  5  6             
    for (int i = 1 ; i < n ; i++) //80 | 90 60 30 50 70 40
    {
    key = arr[i];//1 index =  90
    j = i- 1 ; //0 index = 80 
    
    while (j >= 0 && arr[j] > key ) //80 > 90
    {
        arr[j + 1] = arr[j];
        j = j - 1 ;
    }
    arr[j + 1] = key; //90
    }
}

void printArray(int arr[] , int n)
{
    for(int i = 0 ;i < n ; i++ )
    cout << arr[i] << " ";
    cout << endl ;
}






/*
void insertionSortRecursive(int arr[], int n)
{
	// base case 
	if (n <= 1)
		return;

	insertionSortRecursive(arr, n - 1);
	int last = arr[n - 1];
	int j = n - 2;

	while (j >= 0 && arr[j] > last)
	{
		arr[j + 1] = arr[j];
		j--;
	}
	arr[j + 1] = last;
}
*/









  
int main()
{
    
 int arr[] = {80,90,60,30,50,70,40};
 int n = sizeof(arr) / sizeof(arr[0]); 
 
 insertionSort(arr , n);
 printArray(arr , n);
  
  
    return 0;
}
