#include <iostream>
#include <cassert>
#include <string>
using namespace std;

//const int MAX_LENGTH = 100 ; 
template<class t>
class arrayQueueType
{
private :
    int  rear ; //last  tail
    int  front;  // first head 
    int length ; 
    t *arr;
    int maxSize ; 
    
public :

arrayQueueType(int size)
{
    if(size<=0)  // when user put (-) number 
    maxSize = 100;
    else
    maxSize = size ;
    front = 0 ;
    arr = new t [maxSize]; //dynamic size of array
    rear = maxSize - 1;
    length = 0 ;
}

int isEmpty()
{
    return length == 0 ;
}

bool isFull()
{
    return length == maxSize ;
}

 void addQueue(t Element)
 {
     if(isFull())  
     {
         cout<< " Queue is full cannot enqueue...! " ;
     }
     else 
     {
     rear = (rear+1)%maxSize ;
     arr[rear] = Element ;
     length++;
     }
     
 }
 
 void deQueue()
 {
     if(isEmpty())
     {
         cout<< " Empty Queue you can't deQueue \n";
     }
     else
     {
         front = (front +1) % maxSize ;
         length -- ;            
         
     }
 }
 
 
 int frontQueue() // we can rename the front to peek 
 {
     
     /*
     //another way to return the front 
     if(isEmpty())
     {
         cout<<" queue is empty ";
     }
     else 
     {
         return arr[front]; 
     }
     */
     
     
     //assert is func recive bool value true or false
     assert(!isEmpty());
     return arr[front];
 }
 
 int rearQueue()
 {
         //assert is func recive bool value true or false
     assert(!isEmpty());
     return arr[rear];
 }
 
 void printQueue()
 {       
     if(!isEmpty())
     {
     //!=rear+1  ممكن نعملها ونشيل السطر 104
     for ( int i = front ; i != rear ; i = (i+1)%maxSize )
     {
         cout << arr[i] << " ";
     }
     cout<<arr[rear];
     }
     else 
     {
         cout<<" queue is empty ...! ";
     }
 }
 
 
 
 int queueSearch(t element) {
		int pos = -1;
		if (!isEmpty())
		{
			for (int i = front; i != rear; i = (i + 1) % maxSize)
				if (arr[i] == element)
				{
					pos = i;
					break;
				}
			if (pos == -1)
			{
				if (arr[rear] == element)
					pos = rear;
			}
		}
		else
			cout << "Q is empty ! " << endl;
		return pos;
	}
    
    
};

int main()
{
 
 arrayQueueType<char> q1(5);
 q1.addQueue('a');
  q1.addQueue('b');
   q1.addQueue('c');
    q1.addQueue('d');
    q1.addQueue('e');
 
    q1.deQueue();
 //   q1.addQueue('L');
  //cout<< q1.queueSearch('b') <<endl;
   q1.printQueue();
 
 

    return 0;
}


